#include <mavsdk/mavsdk.h>
#include <mavsdk/plugins/action/action.h>
#include <mavsdk/plugins/mission/mission.h>
#include <mavsdk/plugins/telemetry/telemetry.h>

#include <chrono>
#include <functional>
#include <future>
#include <iostream>
#include <memory>
#include <thread>

using namespace mavsdk;
using namespace std;
using std::chrono::seconds;
using std::this_thread::sleep_for;

void usage(const std::string& bin_name)
{
	cerr << "Usage : " << bin_name << " <connection_url>\n";
	// biz buraya Serial ba?lant? girece?iz o da ?u ?ekilde
	// serial:///path/to/serial/dev[:baudrate]
}

shared_ptr<System> get_system(Mavsdk& mavsdk)
{
	cout << "Waiting to discover system...\n";
	auto prom = promise<shared_ptr<System>>{};
	auto fut = prom.get_future();

	mavsdk.subscribe_on_new_system([&mavsdk, &prom]() {
		auto system = mavsdk.systems().back();

		if (system->has_autopilot()) {
			cout << "Discovered autopilot\n" << endl;

			mavsdk.subscribe_on_new_system(nullptr);
			prom.set_value(system);
		}
	});

	//genelde heartbeat'ler 1Hz'de al?n?r biz de sistemi bulmas?n?
	//max 3 saniyede istiyoruz
	if (fut.wait_for(seconds(3)) == future_status::timeout) {
		cerr << "No autopilot found.\n";
		return{};
	}

	//sistemi ?imdi bul
	return fut.get();
}

int main(int argc, char** argv)//argc ve argv silindi
{

	Mavsdk mavsdk;

	const ConnectionResult connection_result = mavsdk.add_any_connection(argv[1]);//argv[1] silindi
	if (connection_result != ConnectionResult::Success) {
		cerr << "Connection failed: " << connection_result << endl;
		return 1;
	}

	auto system = get_system(mavsdk);
	if (!system) {
		return 1;
	}
	auto action = Action{ system };
	auto mission = Mission{ system };
	auto telemetry = Telemetry{ system };

	while (!telemetry.health_all_ok()) {
		cout << "Waiting for system to be ready\n";
		sleep_for(seconds(1));
	}

	cout << "System ready\n";

	cout << "Clearing mission from device" << endl;
	Mission::MissionPlan mission_plan{};
	//mission_plan.mission_items = mission_items;
	const Mission::Result clear_result = mission.clear_mission();

	//mission.clear_mission();

		if (clear_result != Mission::Result::Success) {
			cerr << "Clearing mission failed: " << clear_result << ", exiting.\n";
			return 1;
		}

	cout << "Downloading mission from mission plan" << endl;

	//mission.download_mission();
	pair<Mission::Result, Mission::MissionPlan> download_result = mission.download_mission();

	//const pair<Mission::Result, Mission::MissionPlan> Mission::download_mission();
	if (download_result.first != Mission::Result::Success) {
		cerr << "Mission download failed: " << download_result.first << ", exiting.\n";
		return 1;
	}

	cout << "Arming... \n";
	const Action::Result arm_result = action.arm();
	if (arm_result != Action::Result::Success) {
		cerr << "Arming failed: " << arm_result << endl;
		return 1;
	}
	cout << "Armed.\n";

	auto prom = promise<void>{};
	auto fut = prom.get_future();

	//Görev ba?lamadan önce görev ilerleyi?ine subscribe oluyoruz
	mission.subscribe_mission_progress([&prom](Mission::MissionProgress mission_progress) {
		cout << "Mission progress update: " << mission_progress.current << " / "
			<< mission_progress.total << endl;
		if (mission_progress.current == mission_progress.total) {
			prom.set_value();
		}
		});

	const Mission::Result start_mission_result = mission.start_mission();
	if (start_mission_result != Mission::Result::Success) {
		cerr << "Starting mission failed: " << start_mission_result << endl;
		return 1;
	}

	while (!mission.is_mission_finished().second) {
		sleep_for(seconds(1));
	}

	//Görev tamamland? RTL komutu ver
	cout << "Commanding RTL...\n";
	const Action::Result rtl_result = action.return_to_launch();
	if (rtl_result != Action::Result::Success) {
		cout << "Failed to command RTL: " << rtl_result << endl;
		return 1;
	}
	cout << "Commanded RTL.\n" << endl;

	//Biraz beklememiz gerekiyor yoksa armed durumu do?ru gerçekle?meyebilir
	sleep_for(seconds(2));

	while (telemetry.armed()) {
		//Tamamlanana kadar bekle
		sleep_for(seconds(1));
	}
	cout << "Disarmed, exiting.\n";


}
