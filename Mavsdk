#include <mavsdk/mavsdk.h>
#include <mavsdk/plugins/action/action.h>
#include <mavsdk/plugins/mission/mission.h>
#include <mavsdk/plugins/telemetry/telemetry.h>

#include <chrono>
#include <functional>
#include <future>
#include <iostream>
#include <memory>
#include <thread>

using namespace mavsdk;
using std::chrono::seconds;
using std::this_thread::sleep_for;

void usage(const std::string& bin_name)
{
	std::cerr << "Usage : " << bin_name << " <connection_url> <mission_plan_path>\n";
	// biz buraya Serial bağlantı gireceğiz o da şu şekilde
	// serial:///path/to/serial/dev[:baudrate]
}

std::shared_ptr<System> get_system(Mavsdk& mavsdk)
{
	std::cout << "Waiting to discover system...\n";
	auto prom = std::promise<std::shared_ptr<System>>{};
	auto fut = prom.get_future();

	//genelde heartbeat'ler 1Hz'de alınır biz de sistemi bulmasını
	//max 3 saniyede istiyoruz
	if (fut.wait_for(seconds(3)) == std::future_status::timeout) {
		std::cerr << "No autopilot found.\n";
		return{};
	}

	//sistemi şimdi bul
	return fut.get();
}

int main(int argc, char** argv)
{
	if (argc != 3) {
		usage(argv[0]);
		return 1;
	}

	Mavsdk mavsdk;

	const ConnectionResult connection_result = mavsdk.add_any_connection(argv[1]);
	if (connection_ressult != ConnectionResult::Success) {
		std::cerr << "Connection failed: " << connection_result << '\n';
		return 1;
	}

	auto system = get_system(mavsdk);
	if (!system) {
		return 1;
	}
	auto action = Action{system};
	auto mission = Mission{system};
	auto telemetry = Telemetry{system};

	while (!telemetry.health_all_ok()) {
		std::cout << "Waiting for system to be ready\n";
		sleep_for(seconds(1));
	}

	std::cout << "System ready\n";

	std::cout << "Clearing mission from device" <<
		Mission::MissionPlan mission_plan{};
		mission_plan.mission_items = mission_items;
		const Mission::Result clear_result = mission.clear_mission(mission_plan);	

	std::cout << "Downloading mission from mission plan" << argv[2] << '\n';

	const std::pair<Mission::Result, Mission::MissionPlan> Mission::download_mission(mission_plan);
	if (download_result != Mission::Result::Success) {
		std::cerr << "Mission download failed: " << upload_result << ", exiting.\n";
		return 1;
	}

	std::cout << "Arming... \n";
	const Action::Result arm_result = action.arm();
	if (arm_result != Action::Result::Success) {
		std::cerr << "Arming failed: " << arm_result << '\n';
		return 1;
	}
	std::cout << "Armed.\n";

	auto prom = std::promise<void>{};
	auto fut = prom.get_future();

	//Görev başlamadan önce görev ilerleyişine subscribe oluyoruz burada bir parantez eksik
	mission.subscribe_mission_progress([&prom](Mission::MissionProgress mission_progress) {
		std::cout << "Mission progress update: " << mission_progress.current << " / "
			<< mission_progress.total << '<\n';
		if (mission_progress.current == mission_progress.total) {
			prom.set_value();
		}
	});
	
	const Mission::Result start_mission_result = mission.start_mission();
	if (start_mission_result != Mission::Resuslt::Success) {
		std::cerr << "Starting mission failed: " << start_mission_result << '\n';
		return 1;
	}

	while (!mission.is_mission_finished().second) {
		sleep_for(seconds(1));
	}

	//Görev tamamlandı RTL komutu ver
	std::wcout << "Commanding RTL...\n";
	const Action::Result rtl_result = action.return_to_launch();
	if (rtl_result != Action::Result::Success) {
		std::cout << "Failed to command RTL: " << rtl_result << '\n';
		return 1;
	}
	std::cout "Commanded RTL.\n";

	//Biraz beklememiz gerekiyor yoksa armed durumu doğru gerçekleşmeyebilir
	sleep_for(seconds(2));

	while (telemetry.armed()) {
		//Tamamlanana kadar bekle
		sleep_for(seconds(1));
	}
	std::cout << "Disarmed, exiting.\n";


}
